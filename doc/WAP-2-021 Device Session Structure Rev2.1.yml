# This file defines verbs and parameters for session management, as part of WAP-2-021 Wireless communication protocol
# Creation date: 2025-01-07
# Update date: 2025-01-16
# Revision number: 2
# Author: Tom Hao (tom@onebasehealth.com)
# Reference: WAP-3-080 Device Edge Data Design
# Note: all multi-byte number in big endian

Feature list: # Get the feature IDs supported by the device
  - request:
      - cmd: 0x56
      - payload: null
  - response:
      - cmd: 0x57
      - status : uint8 # 1 - success; 0 - fail
      - payload:
          - featureIds: uint8[]


Log Feature list: # Get the Log feature IDs supported by the device
  - request:
      - cmd: 0x58
      - payload: null
  - response:
      - cmd: 0x59
      - status : uint8 # 1 - success; 0 - fail
      - payload:
          - featureIds: uint8[]          

Set session: # Configure session parameters
  - request:
      - cmd: 0x60
      - payload:
          - sessionId: uint32 # unique by user, generated by app, saved locally in app, not reusable
          - preparationDuration: uint16 # in seconds, set to zero if no preparation is needed
          - runningDuration: uint16 # in seconds
          - logInterval: uint16 # in seconds (Note: 100KB of RAM available for logs, calculate if it's enough with features count, logInterval and runningDuration)
          - logFeaturesLength: uint8 # byte length of following features list
          - logFeatures: uint8[] # id of features to log during the session, broadcast with "proactively uploading data"(0x55) during preparation
          - preparationStatus:
              - length: uint8 # byte length of following features
              - features:
                  - feature0:
                      - featureId: uint8
                      - length: uint8 # byte length of following feature value
                      - value: uint8[]
                  - feature1: ...
                  - ...
          - runningStatus:
              - length: uint8 # byte length of following sessionStatus list
              - statusList:
                  - status0: # time and desired device status during session
                      - time: uint16 # 0 - when session start; 0xFFFF - when session stop
                      - length: uint8 # byte length of following features
                      - features:
                          - feature0:
                              - featureId: uint8
                              - length: uint8 # byte length of following feature value
                              - value: uint8[]
                          - feature1: ...
                          - ...
                  - status1: # same as sessionStatus0
                  - ...
  - response: # for the device to check if the parameters are acceptable
      - cmd: 0x61
      - payload:
          - flag: boolean # 1 - success; 0 - fail
          - reason: uint8 # an error code, present only when parameters check fail

Get session:
  - request:
      - cmd: 0x62
      - payload: null
  - response:
      - cmd: 0x63
      - payload: # same as "Set session parameters", empty if no session configured

Control session:
  - request:
      - cmd: 0x64
      - payload:
          - sessionId: uint32
          - action: uint8 # 0 - start(from preparation), 1 - skip(skip preparation, start the session timer and logging), 2 - stop(either in preparation or running mode)
  - response:
      - cmd: 0x65
      - payload:
          - flag: boolean # 1 - success; 0 - fail

Session status:
  - request:
      - cmd: 0x66
      - payload: null
  - response:
      - cmd: 0x67
      - payload:
          - sessionId: uint32
          - sessionStatus: uint8 # 0 - ready(not configured), 1 - configured(have a session), 2 - preparation, 3 - running, 4 - stopped
          - sessionTime: unit16 # preparation time (in preparation mode), running time (in running mode)
          - logIndex: uint16 # the latest index number of session log

Session broadcast: # send by device every second
  - cmd: 0x69
  - payload: # same as "Session status" response
      - sessionId: uint32
      - sessionStatus: uint8
      - sessionTime: unit16
      - logIndex: uint16

Session log: # send by device every log interval
  - cmd: 0x6B
  - payload:
      - sessionId: uint32
      - index: uint16
      - features:
          - feature0:
              - featureId: uint8
              - length: uint8
              - value: uint8[]
          - feature1: ... # same as feature0
          - ...

Get logs:
  - request: # the app can get multiple log records of consecutive index number with a single request
      - cmd: 0x6C
      - payload:
          - sessionId: uint32
          - index: uint16
          - length: uint8 # how many log records the app wants to get
  - response: # device send a response packet for each index, no response would be sent if sessionId not match or index not found
      - cmd: 0x6D
      - payload: # same as proactively uploaded "Session log"
          - sessionId: uint32
          - index: uint16
          - features:
              - feature0:
                  - featureId: uint8
                  - length: uint8
                  - value: uint8[]
              - feature1: ... # same as feature0
              - ...

Clear session: # clear sessionId, parameters and logs, set session status to ready
  - request:
      - cmd: 0x6E
      - payload:
          - sessionId: uint32
  - response:
      - cmd: 0x6F
      - payload:
          - flag: boolean # 1 - success; 0 - fail
